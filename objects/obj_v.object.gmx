<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_white</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_brick</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t=0
life=1
bulletsp=5
step=1
strike=9
ai=4
tt=0
scr_player_ini_param()
{
xpos[0,0]=x ///32000 par colonne...

ypos[0,0]=y
}
event_inherited()
    life=1
      state_life=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t++

/*var up,down;

up=keyboard_check_pressed(vk_up)
down=keyboard_check_pressed(vk_down)
if up ai++
if down ai--
*/

if life&gt;=0
switch ai 
{
case 0:vspeed=0;hspeed=0;

break;//rien

case 1://sens horaire

hspeed=-5*sin(t/10)
vspeed=5*cos(t/10)

break;

case 2://sens anti horaire

hspeed=5*sin(t/10)
vspeed=5*cos(t/10)

break;

case 3:///en "S" de haut en bas

hspeed=5*sin(t/10)
vspeed=abs(5*cos(t/10))

break;

case 4:///en "S" de droite a gauche

hspeed=abs(5*sin(t/10))
vspeed=5*cos(t/10)

break;



case 5:///en "S" de  gauche a droite

hspeed=-abs(5*sin(t/10))
vspeed=5*cos(t/10)

break;

case 6:///en "S" de bas en haut

hspeed=5*sin(t/10)
vspeed=abs(5*cos(t/10))
break;

case 7 : hspeed=2 ///vers la droite tout simple
break;


case 8 : //demi tour...
if  (t&gt;=0 and t&lt;=180/10)
{hspeed=5*sin(t/10)
vspeed=abs(5*cos(t/10))}
else
if  t&gt;=36
{hspeed=0;vspeed=0}

break;


case 9 : //juste pour le test :
var j,k;
{for (k=0;k&lt;=5;k++)
{
for (j=0;j&lt;=8;j++)
if keyboard_check_pressed(vk_backspace)
{var i; i=0
repeat (4)
{
ID=instance_create(x,y,obj_v)

with ID {strike=k
direction=other.direction+90*i;speed=other.bulletsp;ai=j//ai=irandom(8);//haha nimp en mode random
i++}}}

}

}

break;



}else

event_inherited()







switch strike
{

case  0 : //rien
break;



case 1 : //front attack

if (t mod 100 = 10 )///frequence du tir
{ID=instance_create(x,y,obj_evil_ball)
with ID {direction=other.direction;speed=other.bulletsp}}
break;


case 2 ://ortho attack (4 X 90°)


if (t mod 100 = 10 )///frequence du tir
{var i; i=0
repeat (4)
{
ID=instance_create(x,y,obj_evil_ball)

with ID {
direction=other.direction+90*i;speed=other.bulletsp;i++}}}

break;

case 3 : //front attack

if (t mod 100 = 10 )///frequence du tir
{
ID=instance_create(x,y,obj_evil_ball)
with ID {direction=other.direction;speed=other.bulletsp}}
break;


case 4 : //front attack : multiple shots


if ((t mod 100 = 10 ) or (t mod 100 = 20 ) or (t mod 100 = 30 ))///frequence du tir...
{

ID=instance_create(x,y,obj_evil_ball)
with ID {direction=other.direction;speed=other.bulletsp}}
break;


case 5 : //front attack : multiple shots


if ((t mod 100 = 10 ) or (t mod 100 = 20 ) or (t mod 100 = 30 ))///frequence du tir...
{
ID=instance_create(x,y,obj_evil_ball)
with ID {direction=other.direction;speed=other.bulletsp; type=1;alarm[0]=10}}//tete chercheuse au bout de l'alarme 0
break;

case 6 : //the worm
var ID;

if ((t  = 10/5 ) or (t  = 20/5 ) or (t  = 30/5 ))///frequence du tir...
{
ID[t]=instance_create(x,y,object_index)
with ID[t] 
{direction=other.direction;speed=other.speed;strike=0}

}
//if instance_exists(ID[10])
//with ID[10] {direction=other.direction;speed=other.speed;strike=0}
//tete chercheuse au bout de l'alarme 0
break;

case 7 : //the nest
//ortho attack (4 X 90°)

if (t mod 100 = 10 )
{var i; i=0
repeat (4)
{
ID=instance_create(x,y,obj_v)

with ID {strike=0
direction=other.direction+90*i;speed=other.bulletsp;ai=2//ai=irandom(8);//haha nimp en mode random
i++}}}
break;

case 8 : //perpendicular attack : quand en dessous : "tombe" dessus...



if x &lt;= obj_p.x
{
tt++
}
if tt&gt;=10
vspeed=5


break;


case 9 ://ortho attack (8 X 45°)


if (t mod 100 = 10 )
{var i; i=0
repeat (8)
{
ID=instance_create(x,y,obj_evil_ball)

with ID {
direction=other.direction+45*i;speed=other.bulletsp;i++}}}

break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if x&gt;room_width
x=8
if x&lt;=0
x=room_width
if y&gt;room_height
y=8
if y&lt;=0
y=room_height
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
